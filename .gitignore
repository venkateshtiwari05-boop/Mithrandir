"""
Mithrandir AI: Disaster Management and Relief Specialist

This AI system aggregates and analyzes data from Indian organizations, satellites, on-spot sensors, and drones
to predict disaster likelihood and proactively alert authorities for rapid response.
"""

import requests
import time
import random

# Simulated data sources
INDIAN_ORGS = [
    "https://api.imd.gov.in/weather",
    "https://api.isro.gov.in/satellite",
    "https://api.ndma.gov.in/seismic",
    "https://api.cwc.gov.in/flood"
]

SENSOR_ENDPOINTS = [
    "http://sensor.local/temperature",
    "http://sensor.local/humidity",
    "http://sensor.local/river_level",
    "http://sensor.local/seismic"
]

DRONE_ENDPOINTS = [
    "http://drone.local/aerial_image",
    "http://drone.local/thermal_image"
]

ALERT_AUTHORITIES = [
    "district_admin@example.com",
    "state_disaster_relief@example.com",
    "local_police@example.com"
]

DISASTER_THRESHOLD = 0.7  # Likelihood threshold to trigger alert

class MithrandirAI:

    def __init__(self):
        self.org_data = {}
        self.sensor_data = {}
        self.drone_data = {}
        self.disaster_score = 0

    def collect_org_data(self):
        print("Collecting data from Indian organizations and satellites...")
        for url in INDIAN_ORGS:
            try:
                # Simulate API data fetch
                data = requests.get(url, timeout=2).json()
            except Exception:
                data = {"status": "ok", "value": random.uniform(0, 1)}
            self.org_data[url] = data

    def collect_sensor_data(self):
        print("Collecting data from on-spot sensors...")
        for url in SENSOR_ENDPOINTS:
            try:
                data = requests.get(url, timeout=2).json()
            except Exception:
                data = {"status": "ok", "value": random.uniform(0, 1)}
            self.sensor_data[url] = data

    def collect_drone_data(self):
        print("Collecting data from drones...")
        for url in DRONE_ENDPOINTS:
            try:
                data = requests.get(url, timeout=2).json()
            except Exception:
                data = {"status": "ok", "value": random.uniform(0, 1)}
            self.drone_data[url] = data

    def predict_disaster_likelihood(self):
        print("Analyzing collected data to predict disaster likelihood...")
        # Combine all data points into a single score (Demo logic)
        total = 0
        count = 0
        for dataset in [self.org_data, self.sensor_data, self.drone_data]:
            for v in dataset.values():
                total += v.get("value", 0)
                count += 1
        self.disaster_score = total / max(count, 1)
        print(f"Predicted disaster likelihood score: {self.disaster_score:.2f}")
        return self.disaster_score

    def alert_authorities(self):
        print("ALERT: Disaster likelihood above threshold!")
        print("Notifying authorities...")
        for authority in ALERT_AUTHORITIES:
            print(f"Alert sent to: {authority}")

    def run(self, interval=60):
        while True:
            self.collect_org_data()
            self.collect_sensor_data()
            self.collect_drone_data()
            score = self.predict_disaster_likelihood()
            if score >= DISASTER_THRESHOLD:
                self.alert_authorities()
            else:
                print("Likelihood below threshold. Monitoring...")
            time.sleep(interval)  # Wait before next cycle

if __name__ == "__main__":
    ai = MithrandirAI()
    # For demo: run only one cycle (remove the loop for production)
    ai.collect_org_data()
    ai.collect_sensor_data()
    ai.collect_drone_data()
    score = ai.predict_disaster_likelihood()
    if score >= DISASTER_THRESHOLD:
        ai.alert_authorities()
    else:
        print("Likelihood below threshold. Monitoring...")
